для коррект­ного использования GDB необходимо обязательно вставить в исходный код пролог
функции (function prologue) и эпилог функции (function epilogue)
man gdb
----------------------------------------
компиляция с отладочной информацией:
nasm -f elf64 -g -F dwarf hello.asm -o hello.o
ld -o hello hello.o
запуск отладки программы hello:
gdb ./hello
list вывод исходного кода
run выполнить программу
quit выход из программы:
---------------------------------
установить тип вывода:
set disassembly-flavor intel
посмотреть программу в диассембле:
disassemble main
* 0x00…, – это адреса памяти
* <+5> ...необходимо пять байт памяти
-----------------------------------
0x000000000040100a <+10>:    movabs rsi,0x402000
Инструкция mov rsi, msg заменена на ин­струкцию movabs rsi,0x402000
команда: x/s 0x402000
выводит: 0x402000 <msg>: "hello, world\n"
* x означает examine (обследовать), ключ s – string (строка)
------------------------------------
Ключ c позволяет вывести один символ:
x/c 0x402000  выводит h
x/13c 0x402000  выводит 13 символов начиная с начала строки
Ключ s позволяет вывести строку:
x/s 0x402000 Выводит: "hello, world\n"
Ключ d вывод символов в десятичном представлении:
x/d 0x402000
x/13d 0x402000
Ключ i позволяет вывести информацию о слове:
x/i 0x402000
Ключ x выводит символ в шестнацатиричном представлении:
x/x 0x402000
x/13x 0x402000

------------------------------------------
пример обследования программы hello:
начинаем с первой линии
0x0000000000401000 <+0>:     mov    eax,0x1
вводим
x/2x 0x00401000
возвращает 
0x401000 <main>:        0xb8    0x01
Это первая инструкция программы mov eax, 0x1 на машинном языке.
----------------------------------------

для пошагового выполнения блока main:
break main  -> Breakpoint 1 at 0x401000
следующий вызов run продолжит выполнение программы
run
содержимое регистров:
info registers или i r
* здесь можно иследовать rip, счетчик инструкций

=================================
дополнительные команды отладчика GDB
break или b устанавливает точку останова
disable breakpoint число
enable breakpoint число
delete breakpoint число
continue или c продолжает выполнение до следующей точки оста­нова
step или s – шаг в текущую строку
next или n – шаг через текущую строку
help или h – вывод справочной информации
tui enable – разрешение использования простого текстового поль­зовательского интерфейса. * отключения tui disable.
print или p – вывод значения переменной, регистра и т. д.
Например:
- вывод содержимого регистра rax: p $rax;
- вывод содержимого регистра rax в двоичном формате: p/t $rax;
- вывод содержимого регистра rax в шестнадцатеричном формате: p/x $rax.
============================