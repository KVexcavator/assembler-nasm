Двоичные и шестнадцатеричные числа и регистры
=====================================================
преобразование в терминале:
десятичное в двоичное
```bash
echo "obase=2; 8" | bc
echo "obase=2; ibase=10; 8" | bc
```
двоичное в шестнадцатеричное
```bash
echo "obase=16; ibase=2; 1000" | bc
```
шестнадцатеричное в десятичное
```bash
echo $((0xff))  # Вывод: 255
```
xxd — перевод в шестнадцатеричный вид
```bash
echo "Hello" | xxd -p  # Вывод: 48656c6c6f
echo -n 8 | xxd -p     # Вывод 38
```
========================
Числа от 0 до 15
10чное  \ 16чное \ 2чное
0        0         0000
1        1         0001
2        2         0010
3        3         0011
4        4         0100
5        5         0101
6        6         0110
7        7         0111
8        8         1000
9        9         1001
10       A         1010
11       B         1011
12       C         1100
13       D         1101
14       E         1110
15       F         1111
------------------------
Целые числа
Беззнаковые целые числа – это 0 и все положительные целые, для знакового бита место не предусмотрено.
Знаковые целые числа, крайний левый бит равен 1, если число отрицатель­ное, или 0, если число положительное.
------------------------
Как понять, какое основание используется в конкретном месте?
Десятичные числа обычно записываются как есть, 1234. Но некоторые ассемблеры позволяют подчеркивать этот факт для ясности, c суффиксом ”d”: 1234d.
К двоичным числам иногда спереди добавляют префикс ”0b”: 0b100110111. Есть также еще один способ: суффикс ”b”, например: 100110111b. 
Шестнадцатеричные числа имеют префикс ”0x” в Си/Си++и некоторых других ЯП: 0x1234ABCD. Либо они имеют суффикс ”h”: 1234ABCDh — обычно так они представляются в ассемблерах и отладчиках. Если число начинается с цифры A..F, перед ним добавляется 0: 0ABCDEFh.
-------------------------
Восмиричная система на примере аргументов команды chmod
```
10ая \2ая \права
7    111     rwx
6    110     rw-
5    101     r-x
4    100     r--
3    011     -wx
2    010     -w-
1    001     --x
0    000     ---
```
Каждый бит привязан к флагу: read/write/execute
Например, chmod 644 file добавляет права: read/write для владельца; read для группы: read для всех остальных. 644 в восьмеричной системы в двоичной 110 100 100.
