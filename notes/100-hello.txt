Установите инструменты разработки:
```bash
sudo apt update
sudo apt install nasm gcc gdb
sudo apt install gcc-multilib
```
Добавить  код на ассемблере
Скомпилировать и скомпоноватькод
```bash
nasm -f elf64 hello.asm -o hello.o
gcc -m64 hello.o -o hello
```
Запуск
```bash
./hello
```
Отладка программы (опционально)
```bash
gdb ./hello

Можно отключить поддержку PIE во время компиляции, используя флаг -no-pie
gcc -no-pie hello.o -o hello
============================================
section .data
```
Тип \ Длина \ Название
db		8 бит		Байт
dw	  16 бит	Слово
dd		32 бита	Двойное слово
dq		64 бита	Учетверенное слово
```
msg	db  "hello, world"
msg указывает на адрес проживания 'h', 'e' живет по адресу msg+1

Здесь же можно прописать константы:
pi  equ  3.1416
============================================
section .bss
Block Started by Symbol
Здесь живут неинициализированные переменные
```
Тип \ Длина \ Название
resb	8 бит		Байт
resw	16 бит	Слово
resd	32 бит	Двойное слово
resq	64 бит	Учетверенное слово
```
Например, мас­сив из 20 двойных слов:
dArray resd 20
Предпологается, что значения присвоят позже.
============================================
section .text
Здесь вся движуха, подготовка, работа, завершение.
Часть main: называется меткой (label)
mov инструкция ничего не переме­щает, она создает копию источника и за­писывает эту копию в цель:
mov destination, source
Инструкцию mov можно использовать следующим образом:
mov регистр, непосредственное_значение
mov регистр, адрес_памяти
mov адрес_памяти, регистр
недопустимое использование: mov адрес_памяти, адрес_памяти
