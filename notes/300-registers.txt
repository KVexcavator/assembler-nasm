Регистры  – это области (локации), используемые процессором для хранения данных, инструк­ций или адресов памяти.
Eсли важна скорость, то процессор может получать доступ к регистрам намного быстрее, чем доступ к оперативной памяти.

Регистры общего назначения
Существует 16 регистров общего назначения, и каждый из них может исполь­зоваться как 64-битовый, 32-битовый, 16-битовый или 8-битовый регистр:
64-бтв \32-бтв \16-бтв \Ниж 8-бтв \Верх 8-бтв \Комментарий
rax    eax      ax      al         ah          -
rbx    ebx      bx      bl         bh          -
rcx    ecx      cx      cl         ch          -
rdx    edx      dx      dl         dh          -
rdi    edi      di      dil        -           -
rsi    esi      si      sil        -           -
rbp    ebp      bp      bpl        -           Указатель базы (адреса)
rsp    esp      sp      spl        -           Указатель стека
r8     r8d      r8w     r8l        -           -
r9     r9d      r9w     r9l        -           -
r10    r10d     r10w    r10l       -           -
r11    r11d     r11w    r11l       -           -
r12    r12d     r12w    r12l       -           -
r13    r13d     r13w    r13l       -           -
r14    r14d     r14w    r14l       -           -  
r15    r15d     r15w    r15l       -           -
==================================================
Каждый 64-битовый регистр содержит набор из 64 бит, нулей и/или единиц, т. е. 8 байт.
Это двоичное представление числа 60 в 64-битовом регистре.
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00111100
* «нижние» биты – это всегда крайние правые биты
Каждый 32-битовый регистр – это набор 32 нижних  бит 64-битового регистра. Точно так же 16-битовый регистр и 8-битовый регистр состоят из нижних 16 и нижних 8 бит 64-битового регистра.
Бит с номером 0 – это крайний правый бит, отсчет начинается справа с ин­декса 0, а не 1. Таким образом, крайний левый бит 64-битового регистра имеет индекс 63, а не 64.
=================================================
Регистр счетчика команд (rip)
Процессор постоянно отслеживает следующую выполняемую инструкцию, со­ храняя ее адрес в регистре rip. Значение в регистре rip можно изменить на любое на свой страх и риск. Более безопасный способ из­ менения значения rip – использование инструкций переходов (jump)
==================================================
Регистр флагов
После выполнения очередной инструк­ции программа может проверить, установлен ли конкретный флаг (например,ZF=1), чтобы затем действовать соответственно.

Имя       \Обозн \Бит \Описание 
Carry       CF    0    В предыдущей инструкции был выполнен перенос (разрядов)
Parity      PF    2    Последний байт содержит четное число единиц
Adjust      AF    4    Операции BCD (в двоично-десятичном коде)
Zero        ZF    6    Результат предыдущей инструкции равен нулю
Sign        SF    8    В результате выполнения предыдущей инструкции самый значимый бит равен 1
Direction   DF    10   Направление операций со строками (инкремент или декремент)
Overflow    OF    11   В результате выполнения предыдущей инструкции возникло переполнение
--------------------------------------------------
Существует еще один регистр флагов с именем MXCSR, который ис­пользуется в одной инструкции со многими потоками данных (SIMD)
=================================================
Регистры xmm и ymm
Эти регистры используются для операций с числами с плавающей точкой и в инструкциях со многими потоками данных (SIMD)